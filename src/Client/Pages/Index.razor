@page "/"
@inject Api api

<MudGrid>

    <MudItem xs="12" sm="5">

        <MudPaper Class="pa-4">

            <MudTextField T="string" Label="Email" Variant="Variant.Outlined" Class="mb-4" @bind-Value="Request.email" @ref="email" Immediate="true" />
            <MudTextField T="string" Label="Height (cm)" Variant="Variant.Outlined" Class="mb-4" @bind-Value="Request.height" @ref="height" Immediate="true" />

            <MudButton FullWidth="true" Variant="Variant.Filled" OnClick="SendRequest" Color="Color.Tertiary">Send request</MudButton>

        </MudPaper>

    </MudItem>

    <MudItem xs="12" sm="7">

        <MudPaper Class="pa-4 mb-6">
            <MudText>Request</MudText>
            <MudElement HtmlTag="pre">@Request</MudElement>
        </MudPaper>

        <MudPaper Class="pa-4">
            <MudPaper Class="d-flex flex-row flex-grow-1 gap-4 justify-space-between " Elevation="0">
                <MudText>Response</MudText>
                @if (Response is not null)
                {
                    <MudChip Variant="Variant.Outlined" Color="@(Response.StatusCode == 200 ? Color.Success : Color.Warning)">
                        @Response.StatusCode.ToString()
                    </MudChip>
                }
            </MudPaper>
            <MudElement HtmlTag="pre">@(Response?.Error ?? "")</MudElement>
        </MudPaper>

    </MudItem>

</MudGrid>

@code{

    FormRequest Request = new();
    FormResponse Response;
    MudTextField<string> email;
    MudTextField<string> height;
    Dictionary<string, MudTextField<string>> inputs;

    protected override void OnAfterRender(bool firstRender)
    {
        inputs = new() { [nameof(email)] = email, [nameof(height)] = height };
    }

    async Task SendRequest()
    {
        ClearErrors();

        Response = await api.PostForm(Request);

        if (!Response.Success)
        {
            foreach (var error in Response.Error.invalidParameters)
            {
                var input = inputs[error.name];
                input.ErrorText = error.reason;
                input.Error = true;
            }
        }
    }

    void ClearErrors()
    {
        foreach (var (name, input) in inputs)
        {
            input.ErrorText = null;
            input.Error = false;
        }
    }
}
